__copyright__ = '© Copyright Ksarp_bots 2021'

import re
import time
import sqlite3
import telebot
import logging
import requests
import wikipedia
from bs4 import BeautifulSoup
from gtts import gTTS
from telebot import types
from textblob import TextBlob
from deep_translator import GoogleTranslator
from wikipedia.exceptions import DisambiguationError

con = sqlite3.connect("tr_new.db", check_same_thread=False) # подключаемся к базе данных
cur = con.cursor() # создаем объект-курсор


# enable logger
logging.basicConfig(
format='%(asctime)s %(levelname)s: %(message)s',
filename='info.log', filemode='w',
level=logging.DEBUG)

TOKEN = '1821952294:AAERWo295ydLbstgWYxch4PJr9kJfm7VkBY' # это токен моего бота
bot = telebot.TeleBot(TOKEN, parse_mode='Markdown')

admin_id = 1785108916  # id АДМИНА то есть меня хахахахах
down_s = 'Перевожу🔄'


class Datas:
    
    def __init__(self, message):
        self.u_id = message.from_user.id
        self.f_name = message.from_user.first_name
        self.u_name = message.from_user.username

    
def validation():
    status = ['creator', 'administrator', 'member']
    check = bot.get_chat_member('@Ksarp_bots', u_id).status
    
    if check not in status:
        return False
    else:
        return True

@bot.message_handler(commands=['start'])
def start(message):
    data = Datas(message)

    status = ['creator', 'administrator', 'member']


    if bot.get_chat_member('@Ksarp_bots', data.u_id).status not in status:
        bot.send_message(u_id, 'Пожалуйста подпишитесь на канал @Ksarp_bots')
        return False;
    else:
        result = cur.execute(f"""SELECT * FROM users WHERE id = ?""", (data.u_id,))
                    
        result2 = cur.fetchall()

        if result2 == None or result2 == [] or result2 == ():                                                           # Регистрируем пользователя
            cur.execute(f"""
            INSERT INTO users (id, username, name, lang, trans) VALUES (?, ?, ?, ?, ?)
            """, (data.u_id, data.u_name, data.f_name, 'ru', 'hello',))
            con.commit()
        else:
            pass

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('Выбрать язык🌏', 'Помощь⁉')
        markup.row('Про бота💬', 'Отзывы📫️')
        markup.add('Wikipedia🌐')
        
        bot.reply_to(message, f'''
*Привет {data.f_name},
это обычный бот переводчик🤖.
Если не поняли как использовать
нажмите на /help*''', reply_markup=markup)


@bot.message_handler(commands=['help'])
def help1(message):
    text = """
*Использования бота:
нажмите на кнопку снизу Выбрать язык
и выберите для вас подходящий язык а потом
введите текст*
"""
    bot.reply_to(message, text)


@bot.message_handler(regexp='Назад🔙️')
def main_menu(message):
    u_id = message.from_user.id
    u_name = message.from_user.username
    f_name = message.from_user.first_name
    m_id = message.message_id
    
    status = ['creator', 'administrator', 'member']

    if bot.get_chat_member('@Ksarp_bots', u_id).status not in status:
        bot.reply_to(message, '*Пожалуйста подпишитесь на канал @Ksarp_bots*')
        return False;
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row('Выбрать язык🌏', 'Помощь⁉') # добавляем кнопки
        markup.row('Про бота💬', 'Отзывы📫️')
        markup.add('Wikipedia🌐')
        m_id = message.message_id
        
        bot.reply_to(message, "*меню🔝*", reply_markup=markup)


@bot.message_handler(regexp='Wikipedia🌐')
def wiki1(message):
    u_id = message.from_user.id
    u_name = message.from_user.username
    f_name = message.from_user.first_name
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('Назад🔙️')

    status = ['creator', 'administrator', 'member']

    if bot.get_chat_member('@Ksarp_bots', u_id).status not in status:
        bot.reply_to(message, '*Пожалуйста подпишитесь на канал @Ksarp_bots*')
        return False;
    else:
        text = bot.reply_to(message, '*Wikipedia🌐*\n\n_введите ваш запрос:_',
        reply_markup=markup)
        
        bot.register_next_step_handler(text, wiki_main)


def wiki_main(message):
    u_id = message.from_user.id
    if message.text == 'Назад🔙️': return main_menu(message)
    try:    
        lang = TextBlob(message.text).detect_language()
        wikipedia.set_lang(lang)
        
        page2 = wikipedia.page(message.text)
        page_url = page2.url
        page_text = wikipedia.summary(message.text, sentences=1000)
        
        bot.reply_to(message, 'Подождите...')
        bot.reply_to(message, page_text + f"\n\n{page_url}")
        return main_menu(message)
    except Exception as e:
        bot.send_message(u_id, f'По запросу `{message.text}` ничего не найдено ✖️')           
        bot.send_message(admin_id, e)               
        return main_menu(message)                   
    except DisambiguationError as dis_er:
        bot.reply_to(message, dis_er)
    except IndexError as e:
        print(e)


@bot.message_handler(regexp='Выбрать язык🌏')
def lang(message):
    u_id = message.from_user.id
    u_name = message.from_user.username
    f_name = message.from_user.first_name

    status = ['creator', 'administrator', 'member']

    if bot.get_chat_member('@Ksarp_bots', u_id).status not in status:
        bot.send_message(u_id, '*Пожалуйста подпишитесь на канал @Ksarp_bots*')
        return False;
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('ENG🏴󠁧󠁢󠁥󠁮󠁧󠁿', 'RUS🇷🇺')
        keyboard.add('UZB🇺🇿')
        keyboard.add('Назад🔙️')
        
        bot.delete_message(u_id, message.message_id)
        bot.send_message(message.chat.id, '*Выберите язык для перевода🔧*', reply_markup=keyboard)


@bot.message_handler(regexp='Помощь⁉')
def helper(message):
    u_id = message.from_user.id
    u_name = message.from_user.username
    f_name = message.from_user.first_name

    status = ['creator', 'administrator', 'member']

    if bot.get_chat_member('@Ksarp_bots', u_id).status not in status:
        bot.reply_to(message, '*Пожалуйста подпишитесь на канал @Ksarp_bots*')
        return False;
    else:
        bot.reply_to(message,'''
Чтобы начать работу
нажмите на кнопку *Выбрать язык🌏*
а потом выберите нужный для вас язык''',
)


@bot.message_handler(regexp='Про бота💬')
def info(message):
    chat_id = message.chat.id
    bot.send_message(chat_id, """
*Этот бот переводчик поддерживает 
три языка и +озвучка текста,
присоединяйтесь в наш канал @Ksarp_bots
чтобы узнавать новости*""")


@bot.message_handler(regexp='Отзывы📫️')
def msg_users(message):
    u_id = message.from_user.id
    u_name = message.from_user.username
    f_name = message.from_user.first_name

    status = ['creator', 'administrator', 'member']

    if bot.get_chat_member('@Ksarp_bots', u_id).status not in status:
        bot.reply_to(message, 'Пожалуйста подпишитесь на канал @Ksarp_bots')
        return False;
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('Назад🔙️')
        chat_id = message.chat.id
        bsm = bot.reply_to(message, "_Пишите ваш отзыв:_", reply_markup=markup)
        bot.register_next_step_handler(bsm, database)


def database(message):
    data = Datas(message)
    if message.text == 'Назад🔙️': return main_menu(message)

    bot.send_message(
admin_id, f"""
*🆔:* `{data.u_id}`
*От:* [{data.f_name}](t.me/{data.u_name})
*Отзыв:* `{message.text}`
""")
    
    bot.send_message(u_id, "*Ваш отзыв принят📩️*")
    return main_menu(message)


@bot.message_handler(regexp='.nodir')
def check(message):
    data = Datas(message)   
    if data.u_id == admin_id:
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('📊Statistika', '/start')
        markup.add('send_message📩')
        
        bot.send_message(admin_id, f"""
👋Привет, [создатель](t.me/nodir_404)
🆔: {data.u_id}""", reply_markup=markup)
    else:
        bot.send_message(u_id, '*Вы не админ!!*')


@bot.message_handler(regexp='📊Statistika')
def Statistika(message):
    u_id = message.from_user.id
    
    if u_id == admin_id:
        cur.execute("SELECT * FROM users")
        arr = cur.fetchall()
        quantity_u = len(arr) 
        
        ar_txt = []
        bot.send_message(admin_id, f'''
*👦Users: {quantity_u}*
''')

        for data in arr:    
            ar_txt.append(f"id: {data[0]}\nusername: @{data[1]}\nname: {data[2]}")
            
        with open('users.txt', 'w', encoding="utf-8") as f:
            f.write('\n\n'.join(ar_txt))
        
        file = open('users.txt', 'r')
        bot.send_document(admin_id, file)
        return main_menu(message)
    else:
        bot.send_message(u_id, '*Вы не админ!*')
        

@bot.message_handler(regexp='send_message📩')
def sender(message):
    text = bot.send_message(admin_id, '''
*Отправьте сообщения в таком формате:*
<id> <message>
''')

    bot.register_next_step_handler(text, sender_main)

def sender_main(message):
    try:    
        text_d = message.text.split(' ')
        text = ' '.join(text_d[1:])
        u_id = text_d[0]
        bot.send_message(int(u_id), f'*Сообщения:\n{text}*')
        bot.send_message(admin_id, 'Succes!')
    
    except Exception as e:
        bot.send_message(admin_id, f'`{e}`')

@bot.message_handler(content_types=['text'])
def parser(message):
    data = Datas(message)
    status = ['creator', 'administrator', 'member']

    if bot.get_chat_member('@Ksarp_bots', data.u_id).status not in status:
        bot.reply_to(message, '*Пожалуйста подпишитесь на канал @Ksarp_bots*')
        return False;
    else:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(text='озвучить🗣️', callback_data='voice'))

        if message.text == 'ENG🏴󠁧󠁢󠁥󠁮󠁧󠁿':
            cur.execute(f"UPDATE users SET lang = ? WHERE id = ?", ('en', data.u_id,))
            con.commit()
            bot.reply_to(message.u_id,'''        
*Вы выбрали перевод на Английский язык.
Введите текст:*
''')

        elif message.text == 'RUS🇷🇺':
            cur.execute(f"UPDATE users SET lang = ? WHERE id = ?", ('ru', data.u_id,))
            con.commit()
            bot.reply_to(message,'''        
*Вы выбрали перевод на Русский язык.
Введите текст:*
''')

        elif message.text == 'UZB🇺🇿':
            cur.execute(f"UPDATE users SET lang = ? WHERE id = ?", ('uz', data.u_id,))
            con.commit()
            bot.reply_to(message,'''        
*Вы выбрали перевод на Узбекский язык.
Введите текст:*
''')

        else:
            try:
                langu1 = cur.execute(f"SELECT lang FROM users WHERE id = ?", (data.u_id,))
                langu = cur.fetchall()
                json2 = GoogleTranslator(source='auto', target=langu[0][0]).translate(message.text)
                cur.execute(f'UPDATE users SET trans = ? WHERE id = ?', (json2, data.u_id,))
                
                bot.reply_to(message, down_s)
                bot.reply_to(message, f"`{json2}`", reply_markup=keyboard)    
            except Exception as e:
                print('error!', e)
                bot.send_message(data.u_id, '''
*⚠️что-то пошло не так.
Напишите в отзывы что произошло⚠️*''')


@bot.callback_query_handler(func=lambda c: c.data == 'voice')
def converter(callback_query: types.CallbackQuery):
    bot.answer_callback_query(callback_query.id)
    call_id = callback_query.from_user.id
    try:
        langu1 = cur.execute(f"SELECT lang FROM users WHERE id = ?", (call_id,))
        langu = cur.fetchall()
        cur.execute(f"SELECT trans FROM users WHERE id = ?", (call_id,))
        teext = cur.fetchall()[0][0]
        speech = gTTS(text=teext, lang=langu[0][0], slow=False)
        speech.save('text.ogg')
        audio = open('text.ogg', 'rb')
        bot.send_audio(callback_query.from_user.id, audio)
    except Exception as e:
        print('error with voice')
        text = '''
*⚠️что-то пошло не так.
Напишите в отзывы что произошло⚠*
'''
        bot.send_message(callback_query.from_user.id, text)

if __name__ == '__main__':    
    print('started')
    bot.polling(none_stop=True)
